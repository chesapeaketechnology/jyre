.template 0

include "library.gsl"
include "zproto_dot.gsl"
resolve_includes()
set_defaults()
generate_dot()

#   Set globals
global.ClassName = java_class_name(class.name)
global.PackageName = java_package_name(class.package)

#   Load message structures for this engine
global.proto = xml.load_file (class.protocol_class + ".xml")
#   Hack to set proto class name, as java_class_name is not working or there's a bug...
class.proto = "$(class.Protocol_class)"
global.ProtocolName = "$(string.replace(class.proto, '_'))"
global.ProtocolPackageName = java_package_name(proto.package)

#  Collect all events and actions at class level
for class.state
    state.comma = last()?? ""? ","
    for event where name <> "*"
        event.name = "$(name:c)"
        #   Mark event as external if it is a protocol message
        if count (proto.message, message.name = event.name)
            event.external = 1
        endif
        #   Copy event to class if not yet defined there
        if count (class.event, name = -1.name) = 0
            copy event to class
        endif
    endfor
    for event
        for action where count (class.action, name = -1.name) = 0
            copy action to class
        endfor
    endfor
    for [before]
        for action where count (class.action, name = -1.name) = 0
            copy action to class
        endfor
    endfor
    for [after]
        for action where count (class.action, name = -1.name) = 0
            copy action to class
        endfor
    endfor
endfor

#   Process super states
for class.state where defined (inherit)
    for class.state as superstate where name = inherit
        for event where count (state.event, name = -1.name) = 0
            copy event to state
        endfor
    else
        echo "E: superstate $(inherit) isn't defined"
    endfor
endfor

#   Remove super states
for class.state where defined (inherit)
    for class.state as superstate where name = inherit
        delete superstate
    endfor
endfor

.endtemplate
.macro output_case_body()
.       for action
.           if name = "send"
                        zre.whisper(zreEvent.getPeer(), codec.serialize($(java_var_name(action.message))Message));
.           elsif name = "stop"
                        reactor.cancel(this);
.           else
                        handler.$(java_var_name(name))(this);
.           endif
.       endfor
.       if defined (event.next)
                        state = State.$(NEXT:C);
.       endif
.       if defined (event.trigger)
                        next = Event.$(TRIGGER:C);
.       elsif name = "whisper" | name = "shout"
                        messageType = codec.deserialize(zreEvent.getContent());
                        try {
                            next = Event.valueOf(messageType.name());
                        } catch (IllegalArgumentException ignored) {}
.       endif
.endmacro
.echo "Generating src/main/java/$(class.package)/$(ClassName)Agent.java..."
.directory.create("../src/main/java/$(class.package)")
.output "../src/main/java/$(class.package)/$(ClassName)Agent.java"
/* ============================================================================
 * $(ClassName)Agent.java
 *
 * Generated class for $(ClassName)Agent
 * ----------------------------------------------------------------------------
 * $(string.trim (class->license.):block                                      )
 * ============================================================================
 */
package $(PackageName);

import $(ProtocolPackageName).*;

import org.jyre.ZreEvent;
import org.jyre.ZreInterface;
import org.zeromq.api.LoopAdapter;
import org.zeromq.api.Reactor;
import org.zeromq.api.Socket;

/**
 * $(ClassName)Agent class.
 *
 * @author $(switches.author)
 */
public class $(ClassName)Agent extends LoopAdapter {
    // Handle of the ZreInterface client
    private ZreInterface zre;

    // Application callback handler
    private Handler handler;

    // Structure of our class
    private Reactor reactor;
    private Socket socket;
    private ZreEvent zreEvent;
    private $(ProtocolName)Codec codec = new $(ProtocolName)Codec();
    private $(ProtocolName)Codec.MessageType messageType;
    private State state = State.START;
    private Event event;
    private Event next;

.for proto.message
    private $(java_class_name(message))Message $(java_var_name(message))Message;
.endfor

    public $(ClassName)Agent(ZreInterface zre, Handler handler) {
        this.zre = zre;
        this.handler = handler;
    }

    public ZreEvent getZreEvent() {
        return zreEvent;
    }

    public $(ProtocolName)Codec getCodec() {
        return codec;
    }

    public Socket getSocket() {
        return socket;
    }

    public $(ProtocolName)Codec.MessageType getMessageType() {
        return messageType;
    }

    public State getState() {
        return state;
    }

    public Event getEvent() {
        return event;
    }

    public Event getNext() {
        return next;
    }

    public void triggerEvent(Event next) {
        this.next = next;
    }

    @Override
    protected void execute(Reactor reactor, Socket socket) {
        this.reactor = reactor;
        this.socket = socket;

        zreEvent = zre.receive();
        next = Event.valueOf(zreEvent.getEventType().name());
        while (next != null) {
            event = next;
            next = null;
            execute();
        }
    }

    protected void execute() {
        switch (state) {
.for class.state
            case $(NAME:C): {
                switch (event) {
.   for event where name <> "*"
                    case $(NAME:C): {
.       output_case_body()
                        break;
                    }
.   endfor
.   for event where name = "*"
                    default: {
.       output_case_body()
                        break;
                    }
.   endfor
                }
                break;
            }
.endfor
        }
    }

    /**
     * States we can be in.
     */
    public enum State {
.for class.state
.   state.comma = last()?? ""? ","
        $(NAME:C)$(comma)
.endfor
    }

    /**
     * Events we can process.
     */
    public enum Event {
.for class.event
.   event.comma = last()?? ""? ","
        $(NAME:C)$(comma)
.endfor
    }

    /**
     * Application callback handler interface.
     */
    public interface Handler {
.for class.action where name <> "stop" & name <> "send"
.   if index() <> 1

.   endif
        /**
         * Callback for the "$(name)" action.
         *
         * @param agent Handle to the agent instance
         */
        void $(java_var_name(name))($(ClassName)Agent agent);
.endfor
    }
}
